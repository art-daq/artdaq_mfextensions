
Message Analyzer Rule Engine and Design Model
Qiming Lu  03/28/13  

The Message Analyzer is a realtime correlated log message analyzing tool
to capture abnormalities in the DAQ system. The analyze engine performs
basic filtering and regex matches on the logging messages, and reacts to
situations arises from hidden system failure that is caught by complex
triggering rules, which are all flexible and are user-configurable.

--------------------------
I. Features and highlights:
--------------------------

1. The rule engine performs message filtering based on user-defined simple
"conditions". E.g., 'dcm to buffernode connection timeout"

2. Each 'condition' has a boolean output tested against the message count
and/or frequency

3. Users can group similar message filtering 'conditions' in to a single
one by providing the regex for the message sources and/or the targets,
while still able to distinguish the conditions for different source/target
combinations ('condition collapsing', so far support the collapsing along
the message sources and/or message targets). For example, a condition can
be as simple as "dcm .* cannot talk to buffer node .*", instead of writing
a list of conditions with different dcms and buffer nodes

4. A rule is built based on a various number of simple 'conditions' (by
connecting the boolean outputs of the conditions with boolean operators)
to capture a complex situation reflecting the system status. Because a
rule can analyze multiple categories of log messages and having a global
knowledge across the system, the diagnostics is usually much more precise
than simple message filtering and matching tools

5. Allow user defined functions to be applied on messages and simple con-
ditions, which greatly boosts the message analysis capabilities by not 
limiting to simple message filtering and matching 

6. A rule is expressed in a domain-specific rule-language -- it's easy to
understand but still capable of describing complex rules

7. When a condition has been met, a rule can raise various types of alarms,
including but not limited to, a status message, a pop up dialog, or
sending a run control message to notify users of the situation

8. When using 'collapsed conditions' (meaning a single condition
representing multiple similar conditions) the rule engine is able to make
distinguish and send out multiple alarms. E.g, given the rule with a
simple condition 'missing heartbeats from dcm.*', 'missing heartbeats from
dcm05' and 'missing heartbeats from dcm03' triggers two alarms (or could
be only one alarm if user choose to)

9. All conditions and rules are written in FHiCL configuration language,
and is highly configurable


--------------------------
II. Configurations
--------------------------

2.1 Configuration files
---------------------------------------------------------------------

There are two configuration files used by MsgAnalyzer (the message anaylyzer 
GUI appliation). The first configuration file has the default name
"msganalyzer_mf.fcl", which is used to control the emitting of logging messages 
(mainly debugging messages) by the message analyzer. Message analyzer uses
messagefacility for message logging, so the configuration file uses the same
format and syntax as other messagefacility configuration files.

The second configuration file is the main configration file for the message
analyzer. The default file name is "msganalyzer.fcl". The file contains
parameters for the following message analyzer functioning blocks,

* 1. EHS : bool

     enable/disable error hanlding supervisor (EHS). When disabled, only 
     certain type of rule actions will be allowed, such as warning messages. 
     Anything that can actually affect the running DAQ system will be 
     disabled.

* 2. node_status : 
     {
       alarm_on_first_warning : [ ]
       alarm_on_first_error : [ ]
     }

     whether to emit a MA console message when encoutering the first
     warning/error message from the listed nodes. The value contains a list of
     strings corresponding to the application name of each node, e.g.,
     "RunControl", "RCWindow". Regex is also supported, e.g., "dcm-3-01.*".
     Also can use "*" for all nodes.

* 3. conditions :
     {
       ...
     }
     rules :
     {
       ...
     }

     configurations for conditions and rules. Details in the following
     sections.

By default, meaning start 'MsgAnalyzer' without supplying any command line
options, message anayzer will look for "msganalyzer.fcl" and
"msganalyzer_mf.fcl" files in the path defined in FHICL_FILE_PATH
enverionement variable. 

FHICL_FILE_PATH is a ':' separated list of paths holding the possible
locations for the configuration files. It is very much like the PATH
environement variable such that the appliation will look for the configuration
file in the path list following the order.

There are command line options to overides the name, and/or specify the actual
path for the configuration files.

* 1. -c, or --configure [/path/file]

     this is to specify the message analyzer configuration file. If the
     /path/file is an absolute path, it ignores the FHICL_FILE_PATH
     envrionement variable.

* 2. -l, or --log [/path/file]

     this is to specify the message facility logging configuration file. If
     the /path/file is an absolute path, it ignores the FHICL_FILE_PATH
     envrionment variable.


2.2 The basic structure of rule/condition configuration is as follows:
---------------------------------------------------------------------

conditions :
{
  condition_1 : 
  {
    ...
  }

  condition_2 : 
  {
    ...
  }
}

rules :
{
  rule_1 : 
  {
    expression : ...
    message    : ...
  }

  rule_2 : 
  {
    expression : ...
    message    : ...
  }
}


2.3 The Congiuration of "condition"s:
---------------------------------------------------------------------

conditions : 
{
  fail_conn_cond :
  {
    description : "this condition detects the connection failer messages
                   between dcms and buffer nodes"
    
    severity : WARNING
    source : ["dcm.*"]
    category : [*]

    regex : "failed making connection with (buffernode (\\d\\d))"

    test  : "grp_to_number(2)<12 && grp_to_number(2)>4"

    persistent : false

    rate :
    {
      occurence : 10
      timespan : 60  # in seconds
    }

    granularity :
    {
      per_source : true
      per_target : true
      target_group : 1  # regex group in match expression
    }
  }
}

* All named conditions are contained in the "conditions : { ... }" conf
  block

* "fail_conn_cond" is the name of the basic condition

* "description" is a brief description of the condition. It can be viewed on
  the MsgAnalyzer "rule engine" tab

* "severity" is a threshold of message severity. Any message with severity 
  higher or equals to the threshold will be marked for further examination.
  "severity" can be set to one of the following: DEBUG, INFO, WARNING, ERROR.

* "source" is an array of allowed sources. Can use regex expression to re-
  present multiple sources. Use ["*"] to indicate all sources

* "category" is an array of allowed categories. Can use regex expression to 
  represent multiple categories. Use ["*"] to indicate all categories

* "regex" is a regex expression used to check the body of an incoming message.
  The message is accepted for further tests if the regex matches the message
  body

* Parantheses "(...)" in the regex has the same meaning (defining groups) as
  in normal regex expressions. Groups are numbered from 1, and can be 
  referenced in other places, such as in "target_group", or in user defined
  functions

* "test" is a user defined test function applied on messages that have passed
  all previous examinations

* Messages passed all previous tests will be checked for frequency, which is
  defined in "rate" configuration block: "occurence" and "timespan" specify
  how frequently (n occurence in t seconds) the message must be seen in order
  to trigger the condition

* The outcome of a (non-degenerated) condition is a boolean value with "true"
  indicating the occurrence and the frequency of matched messages reaches or
  exceeds the preset value; otherwise "false"

* "persistent" can be set to true or false indicating whether or not the 
  condition will remain on until reset manually

  * 1. when set to true, the condition remains on until a mannual reset

  * 2. when set to false, the condition can shut itself off when in the past
       'timespan' seconds the number of relative messages (message that has
       passed all previous tests) is less than the 'occurence' specified in
       the "rate" section

  * 3. note when the "rate" section is unspecified the default 'timespan' is
       infinite (a large number of seconds). So even with 'persistent' set 
       to false the condition will never reset itself

  * 4. a wrinkle to this, the system is entirely driven by incoming messages.
       Therefore if no message comes in to start the engine, the condition
       will never reset by itself. I'm considering adding a periodical timer 
       as a secondary source for driving the engine. Then this will not be a
       problem anymore

* "granularity" configuration block allows to define the boolean outcome of
  the condition under different granulatiry levels: 

  * 1. if both "per_source" and "per_target" are set to "false", the condition
       has only one boolean outcome. Messages coming from different sources
       or pointing to different targets are NOT distinguished

  * 2. if "per_source" set to "true", the condition has a one dimensional
       boolean array of outcomes, with each element representing a single 
       boolean outcome for the corresponding message source. In this case,
       the condition is equivalant to a set of conditions with enumerated
       message sources

  * 3. if "per_target" set to "true", the condition is equivalent to a set of
       conditions with enumerated message targets. The message facility
       message does not have a specific field denoted as "target", or object. 
       But in common practice the object is usually embedded in the message
       body, therefore we leave to the users to define the message object by
       using the group definition in the "regex" and specifying the group
       number in "target_group" field of "granularity" 

  * 4. eventually if both "per_source" and "per_target" are set to "true",
       the condition is expanded to a two-dimensional array of non-
       degenerated conditions with different sources as one axis and targets
       (message objects) as the other one

2.4 Example Conditions:
---------------------------------------------------------------------

cond_1 :
{
  description : "cannot reserve resources"

  severity : ERROR
  source   : [ "runControl" ]
  category : [ "*" ]

  regex    : "failed to reserve resources"

  # use default rate with occurence=1 and timespan=infinite
  # use default granularity with per_source=false and per_target=false
}

cond_2 :
{
  description : "dcm cannot get data flow after 10 attemps in 60 seconds"

  severity : WARNING
  source   : [ "dcm-\\d\\d" ]
  category : [ "*" ]

  regex    : "failed to start data flow"

  rate        : { occurence : 10  timespan : 60 }
  granularity : { per_source : true }
}

cond_3 :
{
  description : "one buffer node has some problem"

  severity : WARNING
  source   : [ "buffernode-\\d\\d" ]
  category : [ "*" ]

  regex    : "problem"

  granularity : { per_source : true }
}

cond_4 :
{
  description : "dcm cannot connect to buffer node"

  severity : WARNING
  source   : [ "dcm-\\d\\d" ]
  category : [ "*" ]

  regex    : "cannot connect to (buffernode-\\d\\d)"

  granularity : {
    per_source   : true
    per_target   : true
    target_group : 1
  }
}

cond_5 :
{
  description : "dcm synchronized to .."

  severity : INFO
  source   : [ "dcm-\\d\\d" ]
  category : [ "*" ]

  regex    : "dcm has synced to (\\d\\d)"

  granularity : {
    per_source : true
    per_target : false
  }
}


2.5 The Configuration of "rule"
---------------------------------------------------------------------

rules :
{
  rule_name :
  {
    description : "An example of a simple rule"
    
    expression : "..." # rule expression
    message    : "..." 

    repeat_alarm : bool

    action : 
    {
      action_type1 : { param1:val param2:val ... }
      action_type2 : { ... }
    }
  }
}


* All named rules are contained in "rules : { ... }" configuration block

* "rule_name" is the name of the rule

* "description" is a brief description of the rule. It can be viewed on
  the MsgAnalyzer "rule engine" tab

* "expression" is a rule expression on how the rule is formed by basic
  conditions and user defined functions. When a new message comes in, it gets
  evaluated against the rule expression via basic "conditions". Evaluating
  to "true" means the system detects a conditioin described by this specific
  rule, and triggeres the alarm. The details about rule expressions will
  be explained in following section

* "message" is the display message when messages trigger the alarm defined 
  by the rule expression. The message could be a plain string, or part
  of the message can be embodied by fields of basic conditions

* "repeat_alarm" is a boolean type parameter to control whether the action
  will be executed repeatedly before reset. Specifically, the rule can only be
  triggered by a different set of conditions or source of conditions. The same
  set of conditions cannot set off the alarm more than once. For example, the
  rule of "dcm ?? down" can be triggered by "bad dcm 03", and later again
  triggered by "bad dcm 05". But will never be triggered more than once by the 
  same "bad dcm 03" without reset the rule and conditions. Default is 'false'
  
* "action" block contains the associated list of actions to be executed when
  the rule triggers. There is no order in the execution. If there is a need
  of ordered execution for a use case I can add an "ordered_action" block.
  Details of the action block will be discussed later


2.6 Rule Expressions
-----------------------------------------------------------

The rule expression gets evaluated each time a new message comes in. The 
rule is make up of pre-defined simple conditions, and connected through
boolean operators. Constrains can also be applied through "WHERE" clause
similar to the SQL language. 


Syntax: EBNF Representation of Rule Expression
----------------------------------------------

rule_expr        := boolean_expr [ 'WHERE' domain_expr ]

boolean_expr     := boolean_and_expr '|' boolean_and_expr
boolean_and_expr := boolean_primary  '&' boolean_primary
boolean_primay   := condition | function | '(' boolean_expr ')'

domain_expr      := domain_and_expr 'OR'  domain_and_expr
domain_and_expr  := domain_primary  'AND' domain_primary
domain_primary   :=   condition '.$' 's'|'t' { '=' condition '.$' 's'|'t' }
                                             [ '=' 'ANY' | string ]
                    | '(' domain_expr ')'

function         := name '(' condition [ '.$' 's'|'t' ] [ { ',' value } ] ')' 
                    [ compare_op value ]

condition        := alpha_lead_str
function         := alpha_lead_str
name             := alpha_lead_str
value            := string | bool | float

compare_op       := '<' | '<=' | '==' | '!=' | '>=' | '>'

string           := ''' alpha_lead_str '''
alpha_lead_str   := "_a-zA-Z" { "_a-zA-Z0-9" }

bool             := 'true' | 'false'

float            := [ '+'|'-' ] { digit } [ '.' [ 'e' ['+'|'-'] { digit } ] ] ]
digit            := "0-9"


Table of Symbols
----------------
definition        :=
alternation        |
option           [...] 
repetition       {...}
terminal string  '...'


2.7 Rule Expression Examples
-----------------------------------------------------------

Given condition "cond" is "dcm-xx" (source) sending messages about cannot
talk to a buffer node "bn-yy" (target). Possible condition expressions could
be:

e1: "cond"
    Any dcm saying about cannot talk to any of the buffer node

e2: "cond WHERE cond.$s='dcm-3-01-01'"
    Only cares about messages coming from dcm-3-01-01

e3: "cond WHERE cond.$t='bn-05'"
    Any dcm says that it cannot talk to bn-05

e4: "cond WHERE cond.$s='dcm-3-01-01' AND cond.$t='bn-05'"
    dcm-3-01-01 reports that it cannot talk to bn-05 (only this case)

e5: "cond WHERE cond.$s='dcm-3-01-01' OR cond.$t='bn-05'"
    Reports from dcm-3-01-01 that it cannot talk to any of the bn, or reports
    coming from any dcm that they cannot talk to bn-05

e6: "count(cond, 'source')>5"
    More than 5 dcms report that they cannot talk to buffer nodes (could be 
    different buffer nodes)

e7: "count(cond, 'source')>5 WHERE cond.$t='bn-03'"
    More than 5 dcms report that they cannot talk to buffer node bn-03

e8: "count(cond, 'source')>5 WHERE cond.$t=ANY"
    More than 5 dcms report that they cannot talk to the same buffer node

e9: "count(cond, 'message')>100" 
    More than 100 messages are reported about dcm cannot talk to buffer
    nodes, regardless of the sources and targets

e10: "is_syncd(cond)"
     Calling user-defined funtion is_syncd() with the condition "cond"

Condition expression can also include more than one simple conditions. 

Given:
Condition "C1" is "dcm-xx" (source) cannot talk to "bn-yy" (target)
Condition "C2" is "bn-xx" (source) does not receive from "dcm-yy" (target)
Condition "C3" is "bn-xx" (source) does not feel well
Condition "C4" is "rcWindow" (source) missing heartbeats from "bn-yy" (target)

e10: "C1 && C3 WHERE C1.$t=C3.$s"

e11: "count(C1, 'source')>5 && (C3 || C4) WHERE C1.$t=ANY AND C1.$t=C3.$s=C4.$t"

e12: "C1 && C2 WHERE C1.$s=C2.$t AND C1.$t=C2.$s"


2.8 Custom Functions in the Rule Expression
-----------------------------------------------------------

* 2.8.1 Overview
----------------

It is not uncommon that the basic boolean combinations of simple conditions
sometimes cannot express the exact scenario for triggering a rule. For
example, we would like to have more than 5 different DCMs all confirm that one
specific farm node is not reachable; Or, we woud like to compare the timing
ping responses from all dcms to make sure that everyone is in sync with rest
of the world. In these cases, the custom functions can be an invaluable
supplementary to the basic boolean expressions built on condtions.

A custom function, e.g., "count()", is built upon one single condition. The
name of the condition is always its first argument. Depends on the functions,
it can also have other arguments. The type to the second and later arguments
is limited to a string, a number (can be an integer or floating number), or a
boolean type. For example, "count()" has two arguments, the first is the name
of the condition, and the second is a string referring to the type of enties
that we wish to count, e.g., count(cond, 'source'), or count(cond, 'target').

The return type of a custom function can also be a string, a number, or a
boolean type. However, for a custom funtion to work in a rule's condition
expression, the outcome associate with the custom function must be a boolean
value. So if the return type is a non-boolean type, it is required to use one
of the compare operators to build a boolean output. For example, 

count(cond, 'source') > 5. 

Supported comparison operators are 

'<', '<=', '==', '!=', '>=', and '>'. 

Also note that the uniary NOT operator ('!') is not supported. Therefore if
ever need a case like this,

!func(cond)

plese use

func(cond)!=true

instead, given that the return type of func() is a boolean type.

Custom functions also support override. Here the 'override' has the same meaning
as in generic programming languages that the engine can make distinguish based
on the signature of the functions.

* 2.8.2 Built-in custom functions
---------------------------------

The rule engine provides two internal custom functions, 'count()' and
'count_percent()',

int count(cond, 'type')

where the 'type' can be 'source', 'target', or 'message'

double count_percent(cond, 'type', 'group')

where the 'type' has the same meaning as in count(), 'group' specify the group
of nodes among which we wish to calcuate the percentage.




2.9 Rule Actions
-----------------------------------------------------------

Once all the conditions met for a rule, it is considered that the rule has
been triggered. The consequences of trigering a rule is that a set of actions
will be executed. There are two general types of actions, one is a rule
messages that is to be displayed on the MA console panal, and everything else.
The message to be displayed is configured in the "message:'message body'"
entry. One or more real actions can be configured in the 

actions : 
{
  action_type1 : { param1:val param2:val ... }
  action_type2 : { ... }
}

configuration block. The 'action_type' specify the type of that actions that
we would like the engine to execute for us. Right now we have "script" which
can be used to execute any shell script, and "mail" to send an email with a
templated body and recipients. The action type is expected to increase to a
few more types, such as "runcontrol" for sending a message to the runcontrol,
"alert" for a pop-up alerting window with a loud "DING...", etc. The rule
engine provides interfaces and templates for anyone to write a custom action
with minimum efforts.

For the currently supported actions,

script : 
{ 
  name  : string
  param : string
}

where 'name' is a string storing the path and filename to the shell script 
to be executed. 'param' is a string that will be appended as parameters to the
shell script.




2.10 Message Templates and Embedded Symbols
-----------------------------------------------------------

Rule messages 'rule_name : { message : string }' and action parameters
'action : { action_type : { param : string } }' can be parameterized. User can
write a template message in the above fields, the actual messages will be
generated depending on the conditions or messages that trigger the rule.

Embedded symbols that will be replaced by the real content are wrapped inside
of ${...}. Following symbols are right now supported,

${cond.$s}  the source of the lastest message in condition 'cond' that 
            triggered the rule

${cond.$t}  the target of the latest message in condition 'cond' that
            triggered the rule

${cond.$m}  the body of the latest message in condition 'cond' that triggered
            the rule

${cond.$g}  the group of the latest message


Examples of tempated messages:

* "${c1.$s} reports that ${c2.$s} had a problem"
* "most recent message: ${c2.$m}"
* "more than 2 apps say that ${c1.$t} has gone bad"



--------------------------------
III. Writing Custom Functions
--------------------------------

The rule engine provides message filtering and regex matching facilities 
though basic conditions. These conditions can be used as foundamental 
construction bricks to build complex error detecting and pattern recognizing
rules. However the elemental building unit of a rule is not limited to just
basic message filtering. The rule engine also provides interfaces and 
facilities for users to write their own message handling functions, which
brings even more flexibilities and makes it fit for both very generic and 
specific applications.


3.1 A Use Case for User-Defined Functions
-----------------------------------------

Here's an example, dcms are being synchronized to the GPS time periodically.
Everytime a dcms receives a sync command it generates a messages reporting
the dcm has been sync'd to time tc, where tc is the current GPS time. We would
like to build a rule pattern to test if all dcms have been synchronized to
the same GPS time without anyone being left out. To acheive this, we write
a custom function called "is_syncd()" which processes the synchronization
message sent by dcms, and returns a boolean value to indicate whether the
dcms are sync'd or not.

In the configuration file, we need a simple condition like this,

conditions :
{
  ...

  sync_msg :
  {
    description : "a condition to catch all dcm synchronization messages"

    severity   : INFO
    sources    : [ "dcm-\\d\\d" ]
    categories : [ "*" ]

    granularity :
    {
      per_source : true
      per_target : false
    }
  }

  ...
}

Then we can build a rule to make use of the "is_sync()" function and the 
"sync_msg" condition:

rules :
{
  ...

  dcm_sync :
  {
    expression : "is_sync(sync_msg) == false"
    message    : "dcm synchronization failed"
  }

  ...
}

If the engine detects that dcms are not fully synchronized, the error message
will be displayed on the main window. Certain actions may also be performed
from that point on.


3.2 How To Write A Custom Function
----------------------------------







